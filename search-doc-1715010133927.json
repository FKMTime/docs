{"searchDocs":[{"title":"How FKMTime works?","type":0,"sectionRef":"#","url":"/docs/docs/basic-knowledge/how-it-works","content":"How FKMTime works? Basically, there are: Backend: Nest.jsFrontend: ReactDatabase: PostgreSQLMicro-connector: RustFKM Devices (PlatformIO) Communication between devices and backend looks like this: You have to enter your WiFi network details in devices settings on frontend. Micro-connector will connect via bluetooth with all devices and send them WiFi details. After that, devices will be able to communicate with backend by WiFi through micro-connector. You can read more about this in the Production section. #TODO: add link do production","keywords":"","version":"Next"},{"title":"Accessing logs","type":0,"sectionRef":"#","url":"/docs/docs/production/accessing-logs","content":"Accessing logs","keywords":"","version":"Next"},{"title":"Setup environment","type":0,"sectionRef":"#","url":"/docs/docs/development/dev-environment","content":"","keywords":"","version":"Next"},{"title":"Docker​","type":1,"pageTitle":"Setup environment","url":"/docs/docs/development/dev-environment#docker","content":" Run the following command in the root directory of the project  docker compose -f docker-compose-dev.yml up   Frontend will be accessible at localhost:5173, backend at localhost:5000, database at localhost:5432 and api-tester at localhost:5001  You can read how to setup local WCA server here and how to setup local WCA Live server here  If you want other WCA server than local you have to change WCA_ORIGIN and WCA_LIVE_API_ORIGIN in docker-compose-dev.yml file.  ","version":"Next","tagName":"h2"},{"title":"Running backend and frontend separately​","type":1,"pageTitle":"Setup environment","url":"/docs/docs/development/dev-environment#running-backend-and-frontend-separately","content":" Requirements​  NodeJS (version 19.0.0 or later)PostgreSQL  Setup database​  Install PostgreSQLCreate a database  CREATE DATABASE fkm_time;   Backend​  Navigate into backend directory  cd backend   Install dependencies  npm install   Create .env file and enter database URL, JWT secret and WCA and WCA Live URL  PORT=5000 DATABASE_URL=postgres://postgres@localhost:5432/fkm_time SECRET=jwt_secret WCA_LIVE_API_ORIGIN=http://localhost:4000/api WCA_ORIGIN=http://localhost:3000 WCA_CLIENT_ID=example-application-id WCA_CLIENT_SECRET=example-secret   If you don't have WCA server running you can seed the DB with sample data by running  npm run prisma:seed-test   This will also create a user with username admin and password admin, you can use these credentials to login to the admin panel instead of WCA account.  Run backend in development mode  npm run start:dev   The server will be accessible at localhost:5000  Frontend​  Navigate into frontend directory  cd frontend   Install dependencies  npm install   Run development server  npm run dev   Admin panel will be accessible at localhost:5173 ","version":"Next","tagName":"h2"},{"title":"Setup micro-connector","type":0,"sectionRef":"#","url":"/docs/docs/development/micro-connector","content":"Setup micro-connector If you want to use real devices, you have to setup micro-connector for them. You can do it in two ways Using DockerRunning micro-connector directly with Cargo Clone fkm-timer repo and navigate into it git clone https://github.com/filipton/fkm-timer cd fkm-timer ","keywords":"","version":"Next"},{"title":"Setup for production","type":0,"sectionRef":"#","url":"/docs/docs/production/setup-for-production","content":"","keywords":"","version":"Next"},{"title":"Clone the repository (and navigate into it)​","type":1,"pageTitle":"Setup for production","url":"/docs/docs/production/setup-for-production#clone-the-repository-and-navigate-into-it","content":" git clone https://github.com/maxidragon/FKMTime cd FKMTime   ","version":"Next","tagName":"h2"},{"title":"Environment variables​","type":1,"pageTitle":"Setup for production","url":"/docs/docs/production/setup-for-production#environment-variables","content":" Rename the .env.example file to .env and fill in the required fields.  mv .env.example .env   For now, contact us and we will send you hash, token, proxy and WCA oauth credentials. Server will be running locally, but will be accessible from the internet through our proxy server.  ","version":"Next","tagName":"h2"},{"title":"Logs user​","type":1,"pageTitle":"Setup for production","url":"/docs/docs/production/setup-for-production#logs-user","content":" Generate a password hash for the logs user using the following command:  echo -n 'secret-password' | shasum -a 256   Rename the users-example.yml file to users.yml and paste your hash into &quot;password&quot; field  mv dozzle/users-example.yml dozzle/users.yml   And finally, run the following command to start the server:  docker compose up   This will start backend, micro-connector, database and the frontend. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}