{"searchDocs":[{"title":"Adding devices to database","type":0,"sectionRef":"#","url":"/basic-knowledge/adding-devices","content":"","keywords":"","version":"Next"},{"title":"Enter your Wi-Fi data​","type":1,"pageTitle":"Adding devices to database","url":"/basic-knowledge/adding-devices#enter-your-wi-fi-data","content":" Go to devices tab in frontend and click on the settings icon and enter your Wi-Fi data.  ","version":"Next","tagName":"h2"},{"title":"Adding devices​","type":1,"pageTitle":"Adding devices to database","url":"/basic-knowledge/adding-devices#adding-devices","content":" ","version":"Next","tagName":"h2"},{"title":"If your machine supports bluetooth​","type":1,"pageTitle":"Adding devices to database","url":"/basic-knowledge/adding-devices#if-your-machine-supports-bluetooth","content":" After turning on backend and micro-connector it will automatically write Wi-Fi data to devices via bluetooth. After that, devices will be able to communicate with backend by WiFi through micro-connector.  ","version":"Next","tagName":"h3"},{"title":"If your machine doesn't support bluetooth​","type":1,"pageTitle":"Adding devices to database","url":"/basic-knowledge/adding-devices#if-your-machine-doesnt-support-bluetooth","content":" You have to connect to the hotspot created by device. Name of the hotspot will be FkmTimer-XXXX and password will be FkmTimer. After connecting go to 192.168.4.1 and manually enter your wifi data.  ","version":"Next","tagName":"h3"},{"title":"After entering Wi-Fi data​","type":1,"pageTitle":"Adding devices to database","url":"/basic-knowledge/adding-devices#after-entering-wi-fi-data","content":" Click the submit button, and you can easily add devices to the database. They will be displayed at the top of the table.   ","version":"Next","tagName":"h3"},{"title":"Assigning cards & check-in","type":0,"sectionRef":"#","url":"/basic-knowledge/assigning-cards","content":"","keywords":"","version":"Next"},{"title":"Assigning cards​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#assigning-cards","content":" ","version":"Next","tagName":"h2"},{"title":"Buy proper cards​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#buy-proper-cards","content":" You will need to buy RFID cards with 13.56 MHz frequency.  ","version":"Next","tagName":"h3"},{"title":"Assign cards to the competitors​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#assign-cards-to-the-competitors","content":" Go to the persons tab and click Assign cards button.    Just search the competitor and scan the card you want to assign to them and click enter. Search the next competitor and repeat the process.  ","version":"Next","tagName":"h3"},{"title":"Check-in​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#check-in","content":" FKMTime has a check-in system that allows you to keep track of who is present at the competition and got their ID (or any other things).  To start, go to the check-in page.  ","version":"Next","tagName":"h2"},{"title":"Cards assigned before the competition​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#cards-assigned-before-the-competition","content":" If you assigned cards to the competitors before the competition, you can just scan the card and check-in the competitor.    ","version":"Next","tagName":"h3"},{"title":"Cards not assigned before the competition​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#cards-not-assigned-before-the-competition","content":" If you didn't assign cards to the competitors before the competition, you can search for the competitor, assign card to them and check-in at the same time.    ","version":"Next","tagName":"h3"},{"title":"Newcomers​","type":1,"pageTitle":"Assigning cards & check-in","url":"/basic-knowledge/assigning-cards#newcomers","content":" If you are checking-in the newcomer you have to check if their data matches the data presented on their document (passport, driver's license, etc.).   ","version":"Next","tagName":"h3"},{"title":"Accounts","type":0,"sectionRef":"#","url":"/basic-knowledge/accounts","content":"","keywords":"","version":"Next"},{"title":"Creating an account​","type":1,"pageTitle":"Accounts","url":"/basic-knowledge/accounts#creating-an-account","content":" Go to users page    Click on the plus button and choose between FKM and WCA account.  ","version":"Next","tagName":"h2"},{"title":"FKM Account​","type":1,"pageTitle":"Accounts","url":"/basic-knowledge/accounts#fkm-account","content":"   Just fill in the details and click save, user will be able to login with username and password you provided.  ","version":"Next","tagName":"h3"},{"title":"WCA Account​","type":1,"pageTitle":"Accounts","url":"/basic-knowledge/accounts#wca-account","content":"   Search for a person, select role and click save. User will be able to login with WCA account and will have the same permissions as you selected.  You can also delete any account, edit details or change password.  ","version":"Next","tagName":"h3"},{"title":"Access to competition​","type":1,"pageTitle":"Accounts","url":"/basic-knowledge/accounts#access-to-competition","content":" If someone who logs in with WCA account doesn't have access to the competition will obviously not be added to accounts page, you have to add them as delegate/organizer on the WCA website and sync WCIF in competition tab first (or add their WCA Account, as described above). ","version":"Next","tagName":"h2"},{"title":"Competition Volunteers","type":0,"sectionRef":"#","url":"/basic-knowledge/competition-volunteers","content":"","keywords":"","version":"Next"},{"title":"Adding Competition Volunteer to the system​","type":1,"pageTitle":"Competition Volunteers","url":"/basic-knowledge/competition-volunteers#adding-competition-volunteer-to-the-system","content":"   Fill in the form and click save. You can also assign a card to them (read more about assignig cards here).  ","version":"Next","tagName":"h2"},{"title":"Adding a competitor competing only in unofficial events to the system​","type":1,"pageTitle":"Competition Volunteers","url":"/basic-knowledge/competition-volunteers#adding-a-competitor-competing-only-in-unofficial-events-to-the-system","content":" If you want to add a competitor who is competing only in unofficial events, you can do it by clicking on the plus button in the persons tab and fill in the form. After that, you can assign a card to them as well.   ","version":"Next","tagName":"h2"},{"title":"How updates work?","type":0,"sectionRef":"#","url":"/basic-knowledge/how-updates-work","content":"How updates work? We use GitHub Releases to distribute updates. You have to turn on updates in device settings in frontend (you can find them in &quot;Devices&quot; page). After that, turn on all devices and micro-connector. Micro-connector checks for new updates every 5 minutes and if there is a new update, it will automatically download it and send it to all devices. warning Do not turn off device while updating!","keywords":"","version":"Next"},{"title":"Importing competition","type":0,"sectionRef":"#","url":"/basic-knowledge/importing-competition","content":"Importing competition important It is recommended to import competition after creating groups. To import a competition, you need WCA account with access to the competition you want to import. After first login to the system, you will be redirected to the import page. Just click the green import button and you will be redirected to competition settings page. You will need a scoretaking token that can be taken from WCA Live. Go to the account page and generate one. This token is valid for 7 days and specific to the selected competition. If you plan to host unofficial events and want to send results automatically to Cubing Contests you should copy the token from the Cubing Contests Edit Contest page and paste it to the input field. Also, you can set how often you want to send results to WCA Live. By default, every attempt is sent immediately after scanning cards. But you can turn it off completely (for testing purposes) or send results every 5 minutes if internet connection in the venue is not stable. Paste the token to the input field and click the save button.","keywords":"","version":"Next"},{"title":"FKM rev2.0 (standalone device - not display)","type":0,"sectionRef":"#","url":"/assembly-guide/fkm-r2.0-wo-display","content":"","keywords":"","version":"Next"},{"title":"Electronics components​","type":1,"pageTitle":"FKM rev2.0 (standalone device - not display)","url":"/assembly-guide/fkm-r2.0-wo-display#electronics-components","content":" I strongly recommend not buying them on aliexpress (quality of electronics there varies). Im going to link things i bought on TME, so you can buy the exact things i bought.  Shops i recommend:  TMEMouser (expensive delivery options)BotlandDigikey (expensive delivery options)Lcsc (expensive delivery options)  List of required electronics components:  ESP32-WROOM-32E x118650 Cell holder x110uF capacitor x110kOHM resistor x33.3V LDO (AP2111H-3.3TRG1 x1Raster 2.54mm male headers With this one, you can just buy other connector and cables for 2.54mm TP4056 with protection You can buy it whereever, and you can also choose your plug (USB-C, MicroUsb, etc..) MFRC522 module (you can sea4ch for it on aliexpress - this blue one)LCD 16x2 HD44780 LCD + I2C adapter    ","version":"Next","tagName":"h2"},{"title":"PCB Board​","type":1,"pageTitle":"FKM rev2.0 (standalone device - not display)","url":"/assembly-guide/fkm-r2.0-wo-display#pcb-board","content":" To connect everything together you need to buy custom PCB's.  I personally prefer JLCPCB, so i'll provide guide only for JLCPCB. Here are the steps:  Get the gerber files You can also generate them yourself, just download KICAD and search for Fabrication Output Upload them on JLCPCB's website and get the quoteUse default settings (2 layers, 1.6 thickness, 1oz copper weight, etc..)Click SAVE TO CART button and then order it  ","version":"Next","tagName":"h2"},{"title":"Panelization​","type":1,"pageTitle":"FKM rev2.0 (standalone device - not display)","url":"/assembly-guide/fkm-r2.0-wo-display#panelization","content":" To order more PCBs for less money you can panelize them using the panelize.sh script located in the pcb directory of the firmware github repo. Running this script will generate Gerber files for panel with 6PCB's. Ordering this will be much cheaper than ordering just one PCB.  ","version":"Next","tagName":"h3"},{"title":"3D prints​","type":1,"pageTitle":"FKM rev2.0 (standalone device - not display)","url":"/assembly-guide/fkm-r2.0-wo-display#3d-prints","content":" You need to print these things:  CaseLidSwitch holder ","version":"Next","tagName":"h2"},{"title":"How FKMTime works?","type":0,"sectionRef":"#","url":"/basic-knowledge/how-it-works","content":"How FKMTime works? Basically, there are: Backend: Nest.jsFrontend: ReactDatabase: PostgreSQLMicro-connector: RustFKM Devices (PlatformIO) Communication between devices and backend looks like this:","keywords":"","version":"Next"},{"title":"Unofficial events","type":0,"sectionRef":"#","url":"/basic-knowledge/unofficial-events","content":"","keywords":"","version":"Next"},{"title":"How to add an unofficial event?​","type":1,"pageTitle":"Unofficial events","url":"/basic-knowledge/unofficial-events#how-to-add-an-unofficial-event","content":" Go to Unofficial Events page.    Click on the plus button and choose the event and adjust rounds and limits.    Then click on &quot;Add&quot; button.  That's it! Now everything works the same as for official events.  ","version":"Next","tagName":"h2"},{"title":"Entering unofficial events results into CubingContests​","type":1,"pageTitle":"Unofficial events","url":"/basic-knowledge/unofficial-events#entering-unofficial-events-results-into-cubingcontests","content":" If you want to enter unofficial events results into CubingContests, you need to enter CubingContests API key in competition settings.   ","version":"Next","tagName":"h2"},{"title":"Selecting current event","type":0,"sectionRef":"#","url":"/basic-knowledge/selecting-event","content":"","keywords":"","version":"Next"},{"title":"Best option​","type":1,"pageTitle":"Selecting current event","url":"/basic-knowledge/selecting-event#best-option","content":" warning You cannot use this option if you want to hold multiple events at the same time  You can opt for doing it automatically, by checking the &quot;Change groups automatically&quot; checkbox in the competition settings, if so Group will be automatically changed to the next one from schedule if all results are entered and there are no unresolved incidents.  ","version":"Next","tagName":"h2"},{"title":"Changing groups manually​","type":1,"pageTitle":"Selecting current event","url":"/basic-knowledge/selecting-event#changing-groups-manually","content":" Although it is recommended to select &quot;Change groups automatically&quot; option you are not forced to do so, you can change groups manually (but remember to do that after every group). You have to use this option if you want to hold multiple events at the same time.  Go to the &quot;Competition&quot; page and &quot;Current groups&quot; tab and add all groups that are currently taking place in the room.    After selecting, don't forget to click the save button and open round(s) in WCA Live. ","version":"Next","tagName":"h2"},{"title":"Database structure","type":0,"sectionRef":"#","url":"/basic-knowledge/database-structure","content":"","keywords":"","version":"Next"},{"title":"Tables​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#tables","content":" ","version":"Next","tagName":"h2"},{"title":"Competition​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#competition","content":" There is one record in this table. It stores the competition settings, WCIF and other general data. Most of the data in this table is inserted during the import from the WCA website.  id - unique identifiername - competition namewcaId - WCA competition IDsendingResultsFrequency - enum, stores how often the results are sent to the WCA Live/CubingContestscountryIso2 - country ISO2 codeshouldUpdateDevices - boolean, if the devices should be updated with new releasesshouldChangeGroupsAutomatically - boolean, if the groups should be changed automaticallywifiSsid - wifi SSID, that FKMTime devices will be using to connect to micro-connectorwifiPassword - wifi passwordmdns - boolean, whether mDNS should be used to discover devicesws_url - websocket URL if mDNS is not usedwcif - JSON, stores public WCIF of the competitionscoretakingToken - token taken from WCA Live for entering resultscubingContestToken - token taken from CubingContests for entering resultsscoretakingTokenExpiresAt - date, after this date token may have expired (7 days after saving the new token)  ","version":"Next","tagName":"h3"},{"title":"UnofficialEvent​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#unofficialevent","content":" This table stores unofficial events that are held during the competition.  id - unique identifiereventId - id taken from backend/src/events.tswcif - event data in WCIF format (stored as JSON)createdAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Room​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#room","content":" This table stores rooms taken from WCIF during import.  id - unique identifiername - room namecolor - room colorcurrentGroupIds - array of WCIF group IDs that are currently taking place in the room, may be emptycreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Device​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#device","content":" This table stores data about all FKMTime devices that are connected to the system.  id - unique identifiername - device name, can be changedespId - ESP32 device IDtype - device type (enum)batteryPercentage - battery percentage, updated automaticallyroomId - RoomcreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"User​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#user","content":" All user accounts are stored in this table, both FKMTime and WCA accounts added to the system.  id - unique identifierpassword - hashed password, only available for FKMTime accountsusername - username, only available for FKMTime accountsrole - user role (enum)fullName - full name of the userwcaUserId - WCA user ID, only available for WCA accountsisWcaAdmin - boolean, if the user is WCA admin, only available for WCA accountswcaAccessToken - WCA access token, only available for WCA accountscreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"QuickAction​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#quickaction","content":" This table stores quick actions that can be used to simplify resolving incidents process by delegats.  id - unique identifiername - action namecomment - comment that will be added to the attemptgiveExtra - boolean, if the action should give extra attemptisShared - boolean, if the action is shared between all usersuserId - User that created the actioncreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Person​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#person","content":" This table stores data about competitors and staff members. Most data are inserted during import and sync.  id - unique identifierregistrantId - WCA registrant IDname - full namewcaId - WCA IDcountryIso2 - country ISO2 codegender - gendercanCompete - boolean, if the person can competebirthdate - date of birth, null for all persons except newcomerscheckedInAt - date of check-incardId - assigned card ID  ","version":"Next","tagName":"h3"},{"title":"StaffActivity​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#staffactivity","content":" This table stores data about all staff/competing activities, pre-assigned and performed during the competition.  id - unique identifierpersonId - PersondeviceId - Device (can be null)isAssigned - boolean, if the activity is pre-assignedisPresent - boolean, if the person performed the activitygroupId - WCIF group IDrole - role of the person in the group (enum)createdAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Result​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#result","content":" This table stores all results that are entered during the competition.  id - unique identifierpersonId - PersoneventId - event ID, taken from backend/src/events.tsroundId - round ID in WCIF formatisDoubleChecked - boolean, if the result was already double-checkedcreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Attempt​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#attempt","content":" This table is the biggest table, it stores all attempts that are entered during the competition.  id - unique identifiersessionId - unique identifier generated by FKMTime deice that prevents from entering the same attempt twiceresultId - ResultattemptNumber - number of the attemptreplacedBy - id of the attempt that replaced this one (if extra attempt was granted)comment - comment for the attempt, added by the delegatetype - AttemptType, see belowstatus - AttemptStatus, see belowvalue - time in centisecondsoriginalTime - exact time taken from stackmat, in milisecondsjudgeId - Person that judged the attemptdeviceId - Device that was used to enter the attempt (can be null if attempt was entered manually)solvedAt - date of finishing the solvecreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"ScramblingDevice​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#scramblingdevice","content":" This table stores data about scrambling devices (e. g. laptops) that are used during the competition.  id - unique identifiername - device nameencryptedToken - token used to authenticate the deviceencryptedOneTimeCode - one-time code used to login on the deviceroomId - RoomcreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"ScrambleSet​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#scrambleset","content":" id - unique identifierroundId - round ID in WCIF formatset - letter, e. g. &quot;A&quot;createdAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Scramble​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#scramble","content":" id - unique identifierscrambleSetId - ScrambleSetnum - number of the scramble in the setisExtra - boolean, if the scramble is extraencryptedScramble - encrypted scramblecreatedAt - date of creationupdatedAt - date of last update  ","version":"Next","tagName":"h3"},{"title":"Enums​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#enums","content":" ","version":"Next","tagName":"h2"},{"title":"AttemptType​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#attempttype","content":" STANDARD_ATTEMPT - applied for all normal attemptsEXTRA_ATTEMPT - applied for extra attempts  ","version":"Next","tagName":"h3"},{"title":"AttemptStatus​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#attemptstatus","content":" STANDARD - applied for all normal attemptsUNRESOLVED - applied for incidents that need to be resolvedRESOLVED - applied for resolved incidents, without extraEXTRA_GIVEN - applied for resolved incidents, with extra  ","version":"Next","tagName":"h3"},{"title":"UserRole​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#userrole","content":" ADMIN - user with all permissionsSTAFF - user with permissions to check-in, assigning cards and viewing the results  ","version":"Next","tagName":"h3"},{"title":"DeviceType​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#devicetype","content":" STATION - device that is used to enter resultsATTENDANCE_SCRAMBLER - staff attendance device for scramblersATTENDANCE_RUNNER - staff attendance device for runners  ","version":"Next","tagName":"h3"},{"title":"StaffRole​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#staffrole","content":" COMPETITOR - competitorJUDGE - judgeRUNNER - runnerSCRAMBLER - scrambler  ","version":"Next","tagName":"h3"},{"title":"SendingResultsFrequency​","type":1,"pageTitle":"Database structure","url":"/basic-knowledge/database-structure#sendingresultsfrequency","content":" AFTER_SOLVE - selected by default, results are sent to WCA Live/Cubing contestsafter each solveEVERY_5_MINUTES - results are sent to WCA Live/Cubing Contests every 5 minutesNEVER - results are not sent to WCA Live/Cubing Contests ","version":"Next","tagName":"h3"},{"title":"Setup micro-connector","type":0,"sectionRef":"#","url":"/development/micro-connector","content":"","keywords":"","version":"Next"},{"title":"Docker​","type":1,"pageTitle":"Setup micro-connector","url":"/development/micro-connector#docker","content":" Run the following command in the root directory of the project  docker compose up   ","version":"Next","tagName":"h2"},{"title":"Running micro-connector directly with Cargo​","type":1,"pageTitle":"Setup micro-connector","url":"/development/micro-connector#running-micro-connector-directly-with-cargo","content":" Requirements​  Rust (version 1.55.0 or later)Cargo  Just run  cargo run  ","version":"Next","tagName":"h2"},{"title":"Firmware","type":0,"sectionRef":"#","url":"/development/firmware","content":"","keywords":"","version":"Next"},{"title":"Install PlatformIO CLI​","type":1,"pageTitle":"Firmware","url":"/development/firmware#install-platformio-cli","content":" First of all you need to follow the installation guide  ","version":"Next","tagName":"h2"},{"title":"Building​","type":1,"pageTitle":"Firmware","url":"/development/firmware#building","content":" You can easily build the firmware using platformio CLI commands.  cd firmware #ensure you are in the firmware directory (in firmware repo) pio run   By default after build binaries are copied into /tmp/fkm-build folder. Development binaries are marked with their build time (epoch seconds).  ","version":"Next","tagName":"h2"},{"title":"Flashing​","type":1,"pageTitle":"Firmware","url":"/development/firmware#flashing","content":" To easily flash firmware on the device, you can use the built-in OTA (over the air update) in the micro-connector.  By default micro-connector is watching /tmp/fkm-build dir for firmware changes.  To flash development firmware you need to add DEV environment variable. If you are running micro-connector using cargo (not docker) you can change that in .env file in project dir.  ","version":"Next","tagName":"h2"},{"title":"Common issues​","type":1,"pageTitle":"Firmware","url":"/development/firmware#common-issues","content":" If you aren't using DEV mode your firmware won't be updated to the development version of firmware. ","version":"Next","tagName":"h3"},{"title":"Importing database dump","type":0,"sectionRef":"#","url":"/development/importing-database-dump","content":"Importing database dump You can import the database dump into the development environment in the following way: Copy the dump file to the database container: docker cp dump.sql fkmtime-dev-database:/dump.sql; Enter the database container: docker exec -it fkmtime-dev-database bash; Enter the psql shell: psql -d fkm_time; Run the following command in the container: DROP SCHEMA public CASCADE; CREATE SCHEMA public; Exit psql shell and run the following command in the Docker container: psql -d fkm_time &lt; dump.sql; That's it! You have successfully imported the database dump into the development environment.","keywords":"","version":"Next"},{"title":"Accessing logs","type":0,"sectionRef":"#","url":"/production/accessing-logs","content":"","keywords":"","version":"Next"},{"title":"Dozzle​","type":1,"pageTitle":"Accessing logs","url":"/production/accessing-logs#dozzle","content":" Just click on the logs button on frontend or go to /logs and log in with your logs user.  ","version":"Next","tagName":"h2"},{"title":"Docker logs​","type":1,"pageTitle":"Accessing logs","url":"/production/accessing-logs#docker-logs","content":" You can also access logs with docker logs command. Just run this command in project root:  docker compose logs -f  ","version":"Next","tagName":"h2"},{"title":"Setup environment","type":0,"sectionRef":"#","url":"/development/dev-environment","content":"","keywords":"","version":"Next"},{"title":"Docker​","type":1,"pageTitle":"Setup environment","url":"/development/dev-environment#docker","content":" Run the following command in the root directory of the project  docker compose up   Frontend will be accessible at localhost:5173, backend at localhost:5000, database at localhost:5432 and api-tester at localhost:5001  Read about setuping WCA and WCA Live server in WCA Server section.  ","version":"Next","tagName":"h2"},{"title":"Running backend and frontend separately​","type":1,"pageTitle":"Setup environment","url":"/development/dev-environment#running-backend-and-frontend-separately","content":" Requirements​  NodeJS (version 19.0.0 or later)PostgreSQL  Setup database​  Install PostgreSQLCreate a database  CREATE DATABASE fkm_time;   Backend​  Navigate into backend directory  cd backend   Install dependencies  npm install   Create .env file and enter database URL, JWT secret and WCA and WCA Live URL  PORT=5000 DATABASE_URL=postgres://postgres@localhost:5432/fkm_time SECRET=jwt_secret WCA_LIVE_API_ORIGIN=http://localhost:4000/api WCA_ORIGIN=http://localhost:3000 WCA_CLIENT_ID=example-application-id WCA_CLIENT_SECRET=example-secret   If you don't have WCA server running you can seed the DB with sample data by running  npm run prisma:seed-test   This will also create a user with username admin and password admin, you can use these credentials to login to the admin panel instead of WCA account.  Run backend in development mode  npm run start:dev   The server will be accessible at localhost:5000  Frontend​  Navigate into frontend directory  cd frontend   Install dependencies  npm install   Run development server  npm run dev   Admin panel will be accessible at localhost:5173 ","version":"Next","tagName":"h2"},{"title":"WCA Server","type":0,"sectionRef":"#","url":"/development/wca-server","content":"","keywords":"","version":"Next"},{"title":"WCA website​","type":1,"pageTitle":"WCA Server","url":"/development/wca-server#wca-website","content":" By default, FKMTime uses dummy-wca that is included in docker-compose-dev.yml file. With this as a WCA server, you can login using OAuth and import competition.  If you want to use real WCA Server you can either setup local WCA Server or use a staging one (if you have access). If you want to use staging server just change WCA_ORIGIN in docker-compose-dev.yml file to https://staging.worldcubeassociation.org and update frontend/src/logic/request.ts;  ","version":"Next","tagName":"h2"},{"title":"WCA Live​","type":1,"pageTitle":"WCA Server","url":"/development/wca-server#wca-live","content":" By default FKMTime uses dummy-wca-live that is included in docker-compose-dev.yml file. You need to set scoretaking token to wca-live-token and this server will behave like real WCA Live server.  You can read how to setup local WCA Live server here ","version":"Next","tagName":"h2"},{"title":"E2E devices tests","type":0,"sectionRef":"#","url":"/tests/e2e-devices","content":"","keywords":"","version":"Next"},{"title":"Running tests​","type":1,"pageTitle":"E2E devices tests","url":"/tests/e2e-devices#running-tests","content":" E2E test server is mocking normal backend, so you need to disable it in order to run it.  To run E2E tests go to micro-connector project dir and run:  cargo run --bin e2e   This command will test all scenarios in a loop (in random order).  Docker​  There is also a way to start E2E test server using docker. Just build the image;  docker compose build   And then run it:  docker compose up  ","version":"Next","tagName":"h3"},{"title":"Setup for production","type":0,"sectionRef":"#","url":"/production/setup-for-production","content":"","keywords":"","version":"Next"},{"title":"Clone the production repository (and navigate into it)​","type":1,"pageTitle":"Setup for production","url":"/production/setup-for-production#clone-the-production-repository-and-navigate-into-it","content":" git clone https://github.com/FKMTime/production cd production   ","version":"Next","tagName":"h2"},{"title":"Environment variables​","type":1,"pageTitle":"Setup for production","url":"/production/setup-for-production#environment-variables","content":" Rename the .env.example file to .env and fill in the required fields.  mv .env.example .env   For now, contact us and we will send you hash, token, proxy and WCA oauth credentials. Server will be running locally, but will be accessible from the internet through our proxy server.  We are using fkm-proxy for proxying requests to the server. You can find more information about it in the repository.  ","version":"Next","tagName":"h2"},{"title":"Logs user​","type":1,"pageTitle":"Setup for production","url":"/production/setup-for-production#logs-user","content":" Generate a password hash for the logs user using the following command:  echo -n 'secret-password' | shasum -a 256   Rename the users-example.yml file to users.yml and paste your hash into &quot;password&quot; field  mv dozzle/users-example.yml dozzle/users.yml   And finally, run the following command to start the server:  docker compose up   This will start backend, micro-connector, database and frontend. ","version":"Next","tagName":"h2"},{"title":"Dump database","type":0,"sectionRef":"#","url":"/production/dump-database","content":"","keywords":"","version":"Next"},{"title":"Dumping the database​","type":1,"pageTitle":"Dump database","url":"/production/dump-database#dumping-the-database","content":" Enter the database container:  docker exec -it fkmtime-database bash;   Run the following command in the container:  pg_dump -d fkm_time &gt; dump.sql;   This command will dump the database to dump.sql file in the Docker container.  Copy the dump file to the host machine:  docker cp fkmtime-database:/dump.sql dump.sql;   You can read about importing the database into development environment in the Importing database dump section. ","version":"Next","tagName":"h2"},{"title":"E2E backend tests","type":0,"sectionRef":"#","url":"/tests/e2e-main","content":"","keywords":"","version":"Next"},{"title":"Running tests​","type":1,"pageTitle":"E2E backend tests","url":"/tests/e2e-main#running-tests","content":" Go to the backend directory and reset the database  npm run prisma:reset   Seed the database with test data  npm run prisma:seed-test   Run the tests  npm run test:e2e   note E2E will run after every push to the repository, so you can check the status of the tests in the GitHub Actions tab. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}